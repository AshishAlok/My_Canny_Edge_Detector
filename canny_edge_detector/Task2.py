# -*- coding: utf-8 -*-
"""Task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SDNKkfXHAkY47ea6zMzg1OzlmMqft0Gh
"""

from skimage.color import rgb2gray
from skimage import feature
from skimage.transform import resize
from skimage.io import imread,imshow
from skimage import data
import numpy as np
from matplotlib import pyplot as plt
import math
import skimage 


def convolve(image, kernel):
    assert( image.ndim == 2)
    assert( kernel.ndim == 2)
    image_height, image_width = image.shape
    height_kernel, widht_kernel = kernel.shape
    hk = height_kernel//2
    wk = widht_kernel//2
    new_img = np.pad(image, (hk, wk), 'constant', constant_values=0)
    pHi, pWi = new_img.shape
    out = np.zeros((image_height, image_width))
    for i in range(hk, pHi-hk):
        for j in range(wk, pWi-wk):
            img_mat = new_img[i-hk:i+hk+1, j-wk:j+wk+1]
            out[i-hk][j-wk] = np.sum(img_mat*kernel)
    
    return out

def get_images_list():
    a = []
    a.append("blurr1.jpg")
    a.append("blurr2.jpg")
    a.append("blurr2.jpg")
    a.append("blurr3.jpg")
    a.append("blurr4.jpg")
    a.append("blurr5.jpg")
    a.append("img2.jpg")
    a.append("img1.jpg")
    a.append("img3.jpg")
    a.append("img4.jpg")
    a.append("img5.jpg")
    return a


def RGB2GRAY_(image):
    n,m,c= image.shape
    output_image = np.zeros((n,m),np.float32)
    for i in range(n):
      for j in range(m):
        output_image[i][j] = image[i][j][0]*0.3 + image[i][j][1]*0.59 + image[i][j][2]*0.11
    return output_image

def find_laplacian_of_all(image_list):
    laplace_list = []

    laplacian_kernel = np.array([[0,-1,0],[-1,4,-1],[0,-1,0]])
    for i in range(10):
      input_image = imread(image_list[i])
      input_image = RGB2GRAY_(input_image)
      laplace_list.append(convolve(input_image,laplacian_kernel))
    return laplace_list


def get_variance_list(laplace_list):
    a = int(len(laplace_list))
    var_list = np.zeros((a))
    for i in range(a):
      var_list[i] = (np.var(laplace_list[i]))
    
    return var_list

def BlurOrNot():
  image_list = get_images_list()
  laplace_list  = find_laplacian_of_all(image_list)
  variance_list = get_variance_list(laplace_list)

  variance_list.sort()
  print("variance List of training images :",variance_list)

  laplacian_kernel = np.array([[0,1,0],[1,-4,1],[0,1,0]])

  n = int(len(variance_list))
  low = variance_list[0]
  high = variance_list[n-1]


  test_image = imread('test_image.jpg')
  test_image = RGB2GRAY_(test_image)
  test_image_laplace = convolve(test_image,laplacian_kernel) 
  test_image_var = np.var(test_image_laplace)
  print("Test Image variance : ",test_image_var)


  mid = (variance_list[n//2] + variance_list[n//2 -1])/2
  p = 0
  if test_image_var <= mid:
    if(test_image_var<=low):
        print("According to our model test Image is blurred with the probability of ",1)
    else:
      p = ((0.5)*(test_image_var - low))/(low -mid)  + 1
      print("Test Image is blurred with the probability of ",p)
  else:
    if(test_image_var>high):
        print("According to our model test Image is blurred with the probability of ",0)
    else:
      p = ((0.5)*(test_image_var - high))/(mid - high) + 0
      print("Test Image is blurred with the probability of ",p)

BlurOrNot()